#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (1.0526624751212166, 2.1892341468183445, 1.167398777177962)
                double3 target = (0.39588440233955535, -0.7433265225166821, 0.011509317987381085)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary metricsAssembler = {
            dictionary "/World/Black_Oak_Fall" = {
            }
            dictionary "/World/Dogwood" = {
            }
            int version = 1
        }
        dictionary omni_layer = {
            string authoring_layer = "./jetson-graph.usd"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
        }
    }
    defaultPrim = "World"
    endTimeCode = 1000000
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Z"
)

def Xform "World"
{
    def "default_environment" (
        prepend payload = @omniverse://localhost/NVIDIA/Assets/Isaac/4.1/Isaac/Environments/Grid/default_environment.usd@
    )
    {
        quatf xformOp:orient = (0.9999619, 0, 0, 0.008726535)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "jetbot" (
            prepend payload = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.1/Isaac/Robots/Jetbot/jetbot.usd@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0.10906095057725906)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "chassis"
            {
                over "rgb_camera"
                {
                    over "jetbot_camera"
                    {
                        custom uniform vector3d omni:kit:centerOfInterest = (0, 0, -149.85046648879842)
                        float3 xformOp:rotateZYX = (90, -90, 0)
                        float3 xformOp:scale = (1, 0.9999989, 1.000001)
                        float3 xformOp:translate = (-49.82517, -8.962495e-15, -4.440892e-14)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
                    }
                }

                def IsaacImuSensor "Imu_Sensor"
                {
                    int angularVelocityFilterWidth = 1
                    bool enabled = 1
                    int linearAccelerationFilterWidth = 1
                    int orientationFilterWidth = 1
                    float sensorPeriod = -1
                    token visibility = "invisible"
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }

            over "left_wheel"
            {
            }

            over "right_wheel"
            {
            }

            def OmniGraph "Odom"
            {
                token evaluationMode = "Automatic"
                token evaluator:type = "execution"
                token fabricCacheBacking = "Shared"
                int2 fileFormatVersion = (1, 9)
                token pipelineStage = "pipelineStageSimulation"

                def OmniGraphNode "ros2_context" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom uchar inputs:domain_id
                    custom bool inputs:useDomainIDEnvVar
                    token node:type = "omni.isaac.ros2_bridge.ROS2Context"
                    int node:typeVersion = 2
                    custom uint64 outputs:context
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (-373.33267, 588.3094)
                }

                def OmniGraphNode "ros2_publish_raw_transform_tree" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom string inputs:childFrameId
                    custom uint64 inputs:context
                    prepend uint64 inputs:context.connect = </World/default_environment/jetbot/Odom/ros2_context.outputs:context>
                    custom uint inputs:execIn (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    prepend uint inputs:execIn.connect = </World/default_environment/jetbot/Odom/on_playback_tick.outputs:tick>
                    custom string inputs:nodeNamespace
                    prepend string inputs:nodeNamespace.connect = </World/default_environment/jetbot/Odom/constant_string.inputs:value>
                    custom string inputs:parentFrameId
                    custom string inputs:qosProfile
                    custom uint64 inputs:queueSize
                    custom quatd inputs:rotation
                    prepend quatd inputs:rotation.connect = </World/default_environment/jetbot/Odom/isaac_compute_odometry_node_01.outputs:orientation>
                    custom bool inputs:staticPublisher
                    custom double inputs:timeStamp
                    prepend double inputs:timeStamp.connect = </World/default_environment/jetbot/Odom/isaac_read_simulation_time.outputs:simulationTime>
                    custom string inputs:topicName
                    custom vector3d inputs:translation
                    prepend vector3d inputs:translation.connect = </World/default_environment/jetbot/Odom/isaac_compute_odometry_node_01.outputs:position>
                    token node:type = "omni.isaac.ros2_bridge.ROS2PublishRawTransformTree"
                    int node:typeVersion = 1
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (626.0367, 475.1694)
                }

                def OmniGraphNode "ros2_publish_transform_tree" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom uint64 inputs:context
                    prepend uint64 inputs:context.connect = </World/default_environment/jetbot/Odom/ros2_context.outputs:context>
                    custom uint inputs:execIn (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    prepend uint inputs:execIn.connect = </World/default_environment/jetbot/Odom/on_playback_tick.outputs:tick>
                    custom string inputs:nodeNamespace
                    prepend string inputs:nodeNamespace.connect = </World/default_environment/jetbot/Odom/constant_string.inputs:value>
                    custom rel inputs:parentPrim = </World/default_environment/jetbot/chassis> (
                        customData = {
                            dictionary omni = {
                                dictionary graph = {
                                    string relType = "target"
                                }
                            }
                        }
                    )
                    custom string inputs:qosProfile
                    custom uint64 inputs:queueSize
                    custom bool inputs:staticPublisher
                    custom rel inputs:targetPrims = </World/default_environment/jetbot/chassis/rgb_camera/jetbot_camera> (
                        customData = {
                            dictionary omni = {
                                dictionary graph = {
                                    string relType = "target"
                                }
                            }
                        }
                    )
                    custom double inputs:timeStamp
                    prepend double inputs:timeStamp.connect = </World/default_environment/jetbot/Odom/isaac_read_simulation_time.outputs:simulationTime>
                    custom string inputs:topicName
                    token node:type = "omni.isaac.ros2_bridge.ROS2PublishTransformTree"
                    int node:typeVersion = 1
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (568.8285, 151.71245)
                }

                def OmniGraphNode "ros2_publish_odometry" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom vector3d inputs:angularVelocity
                    prepend vector3d inputs:angularVelocity.connect = </World/default_environment/jetbot/Odom/isaac_compute_odometry_node_01.outputs:angularVelocity>
                    custom string inputs:chassisFrameId
                    custom uint64 inputs:context
                    prepend uint64 inputs:context.connect = </World/default_environment/jetbot/Odom/ros2_context.outputs:context>
                    custom uint inputs:execIn (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    prepend uint inputs:execIn.connect = </World/default_environment/jetbot/Odom/on_playback_tick.outputs:tick>
                    custom vector3d inputs:linearVelocity
                    custom string inputs:nodeNamespace
                    prepend string inputs:nodeNamespace.connect = </World/default_environment/jetbot/Odom/constant_string.inputs:value>
                    custom string inputs:odomFrameId
                    custom quatd inputs:orientation
                    prepend quatd inputs:orientation.connect = </World/default_environment/jetbot/Odom/isaac_compute_odometry_node_01.outputs:orientation>
                    custom vector3d inputs:position
                    prepend vector3d inputs:position.connect = </World/default_environment/jetbot/Odom/isaac_compute_odometry_node_01.outputs:position>
                    custom string inputs:qosProfile
                    custom uint64 inputs:queueSize
                    custom vector3d inputs:robotFront
                    custom double inputs:timeStamp
                    prepend double inputs:timeStamp.connect = </World/default_environment/jetbot/Odom/isaac_read_simulation_time.outputs:simulationTime>
                    custom string inputs:topicName
                    token node:type = "omni.isaac.ros2_bridge.ROS2PublishOdometry"
                    int node:typeVersion = 1
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (636.1041, 852.1621)
                }

                def OmniGraphNode "ros2_publish_transform_tree_01" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom uint64 inputs:context
                    prepend uint64 inputs:context.connect = </World/default_environment/jetbot/Odom/ros2_context.outputs:context>
                    custom uint inputs:execIn (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    prepend uint inputs:execIn.connect = </World/default_environment/jetbot/Odom/on_playback_tick.outputs:tick>
                    custom string inputs:nodeNamespace
                    prepend string inputs:nodeNamespace.connect = </World/default_environment/jetbot/Odom/constant_string.inputs:value>
                    custom rel inputs:parentPrim = </World/default_environment/jetbot> (
                        customData = {
                            dictionary omni = {
                                dictionary graph = {
                                    string relType = "target"
                                }
                            }
                        }
                    )
                    custom string inputs:qosProfile
                    custom uint64 inputs:queueSize
                    custom bool inputs:staticPublisher
                    custom rel inputs:targetPrims = </World/default_environment/jetbot/chassis> (
                        customData = {
                            dictionary omni = {
                                dictionary graph = {
                                    string relType = "target"
                                }
                            }
                        }
                    )
                    custom double inputs:timeStamp
                    prepend double inputs:timeStamp.connect = </World/default_environment/jetbot/Odom/isaac_read_simulation_time.outputs:simulationTime>
                    custom string inputs:topicName
                    token node:type = "omni.isaac.ros2_bridge.ROS2PublishTransformTree"
                    int node:typeVersion = 1
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (586.01465, -150.36032)
                }

                def OmniGraphNode "isaac_compute_odometry_node_01" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom rel inputs:chassisPrim = </World/default_environment/jetbot/chassis> (
                        customData = {
                            dictionary omni = {
                                dictionary graph = {
                                    string relType = "target"
                                }
                            }
                        }
                    )
                    custom uint inputs:execIn (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    prepend uint inputs:execIn.connect = </World/default_environment/jetbot/Odom/on_playback_tick.outputs:tick>
                    token node:type = "omni.isaac.core_nodes.IsaacComputeOdometry"
                    int node:typeVersion = 1
                    custom vector3d outputs:angularAcceleration
                    custom vector3d outputs:angularVelocity
                    custom uint outputs:execOut (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    custom vector3d outputs:linearAcceleration
                    custom vector3d outputs:linearVelocity
                    custom quatd outputs:orientation
                    custom vector3d outputs:position
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (-71.13046, 727.52014)
                }

                def OmniGraphNode "constant_string" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom string inputs:value
                    token node:type = "omni.graph.nodes.ConstantString"
                    int node:typeVersion = 1
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (-346.07703, 451.52426)
                }

                def OmniGraphNode "on_playback_tick" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    token node:type = "omni.graph.action.OnPlaybackTick"
                    int node:typeVersion = 2
                    custom double outputs:deltaSeconds
                    custom double outputs:frame
                    custom uint outputs:tick (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    custom double outputs:time
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (-310.756, 244.7857)
                }

                def OmniGraphNode "isaac_read_simulation_time" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom bool inputs:resetOnStop
                    custom int64 inputs:swhFrameNumber
                    token node:type = "omni.isaac.core_nodes.IsaacReadSimulationTime"
                    int node:typeVersion = 1
                    custom double outputs:simulationTime
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (-365.05682, 65.600395)
                }
            }

            def OmniGraph "Driver"
            {
                token evaluationMode = "Automatic"
                token evaluator:type = "execution"
                token fabricCacheBacking = "Shared"
                int2 fileFormatVersion = (1, 9)
                token pipelineStage = "pipelineStageSimulation"

                def OmniGraphNode "ros2_subscribe_twist" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom uint64 inputs:context
                    prepend uint64 inputs:context.connect = </World/default_environment/jetbot/Driver/ros2_context.outputs:context>
                    custom uint inputs:execIn (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    prepend uint inputs:execIn.connect = </World/default_environment/jetbot/Driver/on_playback_tick.outputs:tick>
                    custom string inputs:nodeNamespace
                    prepend string inputs:nodeNamespace.connect = </World/default_environment/jetbot/Driver/constant_string.inputs:value>
                    custom string inputs:qosProfile
                    custom uint64 inputs:queueSize
                    custom string inputs:topicName = "jetbot_cmd_vel"
                    token node:type = "omni.isaac.ros2_bridge.ROS2SubscribeTwist"
                    int node:typeVersion = 1
                    custom vector3d outputs:angularVelocity
                    custom uint outputs:execOut (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    custom vector3d outputs:linearVelocity
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (431.51962, 342.81418)
                }

                def OmniGraphNode "on_playback_tick" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    token node:type = "omni.graph.action.OnPlaybackTick"
                    int node:typeVersion = 2
                    custom double outputs:deltaSeconds
                    custom double outputs:frame
                    custom uint outputs:tick (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    custom double outputs:time
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (93.85249, 702.73486)
                }

                def OmniGraphNode "ros2_context" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom uchar inputs:domain_id
                    custom bool inputs:useDomainIDEnvVar
                    token node:type = "omni.isaac.ros2_bridge.ROS2Context"
                    int node:typeVersion = 2
                    custom uint64 outputs:context
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (100.67033, 321.8784)
                }

                def OmniGraphNode "constant_string" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom string inputs:value
                    token node:type = "omni.graph.nodes.ConstantString"
                    int node:typeVersion = 1
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (93.4415, 516.75696)
                }

                def OmniGraphNode "articulation_controller" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom double[] inputs:effortCommand
                    custom uint inputs:execIn (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    prepend uint inputs:execIn.connect = </World/default_environment/jetbot/Driver/on_playback_tick.outputs:tick>
                    custom int[] inputs:jointIndices
                    custom token[] inputs:jointNames
                    prepend token[] inputs:jointNames.connect = </World/default_environment/jetbot/Driver/make_array.outputs:array>
                    custom double[] inputs:positionCommand
                    custom string inputs:robotPath
                    custom rel inputs:targetPrim = </World/default_environment/jetbot/chassis> (
                        customData = {
                            dictionary omni = {
                                dictionary graph = {
                                    string relType = "target"
                                }
                            }
                        }
                    )
                    custom double[] inputs:velocityCommand
                    prepend double[] inputs:velocityCommand.connect = </World/default_environment/jetbot/Driver/differential_controller.outputs:velocityCommand>
                    token node:type = "omni.isaac.core_nodes.IsaacArticulationController"
                    int node:typeVersion = 1
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (1745.9916, 709.5171)
                }

                def OmniGraphNode "differential_controller" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom double inputs:angularVelocity
                    prepend double inputs:angularVelocity.connect = </World/default_environment/jetbot/Driver/break_3_vector.outputs:z>
                    custom double inputs:dt = 0.01
                    custom uint inputs:execIn (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    prepend uint inputs:execIn.connect = </World/default_environment/jetbot/Driver/ros2_subscribe_twist.outputs:execOut>
                    custom double inputs:linearVelocity
                    prepend double inputs:linearVelocity.connect = </World/default_environment/jetbot/Driver/break_3_vector_01.outputs:x>
                    custom double inputs:maxAcceleration = 1000
                    custom double inputs:maxAngularAcceleration = 1000
                    custom double inputs:maxAngularSpeed = 6000
                    custom double inputs:maxDeceleration = 1000
                    custom double inputs:maxLinearSpeed = 60000
                    custom double inputs:maxWheelSpeed = 380
                    custom double inputs:wheelDistance = 0.105
                    custom double inputs:wheelRadius = 0.033
                    token node:type = "omni.isaac.wheeled_robots.DifferentialController"
                    int node:typeVersion = 1
                    custom double[] outputs:velocityCommand
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (1315.1436, 458.61853)
                }

                def OmniGraphNode "make_array" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom int inputs:arraySize = 2
                    custom token inputs:arrayType (
                        allowedTokens = ["auto", "bool[]", "double[]", "float[]", "half[]", "int[]", "int64[]", "token[]", "uchar[]", "uint[]", "uint64[]", "double[2][]", "double[3][]", "double[4][]", "matrixd[2][]", "matrixd[3][]", "matrixd[4][]", "float[2][]", "float[3][]", "float[4][]", "half[2][]", "half[3][]", "half[4][]", "int[2][]", "int[3][]", "int[4][]", "timecode[]", "frame[4][]", "colord[3][]", "colorf[3][]", "colorh[3][]", "colord[4][]", "colorf[4][]", "colorh[4][]", "normald[3][]", "normalf[3][]", "normalh[3][]", "pointd[3][]", "pointf[3][]", "pointh[3][]", "quatd[4][]", "quatf[4][]", "quath[4][]", "texcoordd[2][]", "texcoordf[2][]", "texcoordh[2][]", "texcoordd[3][]", "texcoordf[3][]", "texcoordh[3][]", "vectord[3][]", "vectorf[3][]", "vectorh[3][]"]
                    )
                    custom token inputs:input0
                    delete token inputs:input0.connect = </World/default_environment/jetbot/Driver/constant_token.inputs:value>
                    prepend token inputs:input0.connect = </World/default_environment/jetbot/Driver/constant_token.inputs:value>
                    custom token inputs:input1 (
                        customData = {
                            string ExtendedAttributeType = "Union-->bool,colord[3],colord[4],colorf[3],colorf[4],colorh[3],colorh[4],double,double[2],double[3],double[4],float,float[2],float[3],float[4],frame[4],half,half[2],half[3],half[4],int,int64,int[2],int[3],int[4],matrixd[2],matrixd[3],matrixd[4],normald[3],normalf[3],normalh[3],pointd[3],pointf[3],pointh[3],quatd[4],quatf[4],quath[4],texcoordd[2],texcoordd[3],texcoordf[2],texcoordf[3],texcoordh[2],texcoordh[3],timecode,token,transform[4],uchar,uint,uint64,vectord[3],vectorf[3],vectorh[3]"
                            dictionary omni = {
                                dictionary graph = {
                                    string attrType = "Union-->bool,colord[3],colord[4],colorf[3],colorf[4],colorh[3],colorh[4],double,double[2],double[3],double[4],float,float[2],float[3],float[4],frame[4],half,half[2],half[3],half[4],int,int64,int[2],int[3],int[4],matrixd[2],matrixd[3],matrixd[4],normald[3],normalf[3],normalh[3],pointd[3],pointf[3],pointh[3],quatd[4],quatf[4],quath[4],texcoordd[2],texcoordd[3],texcoordf[2],texcoordf[3],texcoordh[2],texcoordh[3],timecode,token,transform[4],uchar,uint,uint64,vectord[3],vectorf[3],vectorh[3]"
                                    string resolvedType = "token"
                                }
                            }
                        }
                    )
                    delete token inputs:input1.connect = </World/default_environment/jetbot/Driver/constant_token_02.inputs:value>
                    prepend token inputs:input1.connect = </World/default_environment/jetbot/Driver/constant_token_02.inputs:value>
                    token node:type = "omni.graph.nodes.ConstructArray"
                    int node:typeVersion = 1
                    custom token outputs:array
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (774.71893, 1111.3949)
                }

                def OmniGraphNode "constant_token" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom token inputs:value = "left_wheel_joint"
                    token node:type = "omni.graph.nodes.ConstantToken"
                    int node:typeVersion = 1
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (252.91078, 1086.0962)
                }

                def OmniGraphNode "constant_token_02" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom token inputs:value = "right_wheel_joint"
                    token node:type = "omni.graph.nodes.ConstantToken"
                    int node:typeVersion = 1
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (270.17227, 1230.7871)
                }

                def OmniGraphNode "scale_to_from_stage_units" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom token inputs:conversion (
                        allowedTokens = ["Convert to stage units", "Convert to meters"]
                    )
                    custom token inputs:value
                    prepend token inputs:value.connect = </World/default_environment/jetbot/Driver/ros2_subscribe_twist.outputs:linearVelocity>
                    token node:type = "omni.isaac.core_nodes.OgnIsaacScaleToFromStageUnit"
                    int node:typeVersion = 1
                    custom token outputs:result
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (762.12744, 536.472)
                }

                def OmniGraphNode "break_3_vector" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom token inputs:tuple
                    prepend token inputs:tuple.connect = </World/default_environment/jetbot/Driver/ros2_subscribe_twist.outputs:angularVelocity>
                    token node:type = "omni.graph.nodes.BreakVector3"
                    int node:typeVersion = 1
                    custom token outputs:x
                    custom token outputs:y
                    custom token outputs:z
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (911.16376, 252.5566)
                }

                def OmniGraphNode "break_3_vector_01" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom token inputs:tuple
                    prepend token inputs:tuple.connect = </World/default_environment/jetbot/Driver/scale_to_from_stage_units.outputs:result>
                    token node:type = "omni.graph.nodes.BreakVector3"
                    int node:typeVersion = 1
                    custom token outputs:x
                    custom token outputs:y
                    custom token outputs:z
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (1096.6039, 562.93866)
                }
            }

            def OmniGraph "Camera"
            {
                token evaluationMode = "Automatic"
                token evaluator:type = "execution"
                token fabricCacheBacking = "Shared"
                int2 fileFormatVersion = (1, 9)
                token pipelineStage = "pipelineStageSimulation"

                def OmniGraphNode "on_playback_tick" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    token node:type = "omni.graph.action.OnPlaybackTick"
                    int node:typeVersion = 2
                    custom double outputs:deltaSeconds
                    custom double outputs:frame
                    custom uint outputs:tick (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    custom double outputs:time
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (-770.8451, 367.45877)
                }

                def OmniGraphNode "ros2_context" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom uchar inputs:domain_id
                    custom bool inputs:useDomainIDEnvVar
                    token node:type = "omni.isaac.ros2_bridge.ROS2Context"
                    int node:typeVersion = 2
                    custom uint64 outputs:context
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (-296.7775, 191.73624)
                }

                def OmniGraphNode "isaac_read_imu_node" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom uint inputs:execIn (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    prepend uint inputs:execIn.connect = </World/default_environment/jetbot/Camera/on_playback_tick.outputs:tick>
                    custom rel inputs:imuPrim = </World/default_environment/jetbot/chassis/Imu_Sensor> (
                        customData = {
                            dictionary omni = {
                                dictionary graph = {
                                    string relType = "target"
                                }
                            }
                        }
                    )
                    custom bool inputs:readGravity
                    custom bool inputs:useLatestData = 0
                    token node:type = "omni.isaac.sensor.IsaacReadIMU"
                    int node:typeVersion = 1
                    custom vector3d outputs:angVel
                    custom uint outputs:execOut (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    custom vector3d outputs:linAcc
                    custom quatd outputs:orientation
                    custom float outputs:sensorTime
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (-232.14447, 591.1054)
                }

                def OmniGraphNode "isaac_create_render_product_01" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom rel inputs:cameraPrim = </World/default_environment/jetbot/chassis/rgb_camera> (
                        customData = {
                            dictionary omni = {
                                dictionary graph = {
                                    string relType = "target"
                                }
                            }
                        }
                    )
                    custom bool inputs:enabled
                    custom uint inputs:execIn (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    prepend uint inputs:execIn.connect = </World/default_environment/jetbot/Camera/on_playback_tick.outputs:tick>
                    custom uint inputs:height
                    custom uint inputs:width
                    token node:type = "omni.isaac.core_nodes.IsaacCreateRenderProduct"
                    int node:typeVersion = 2
                    custom uint outputs:execOut (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    custom token outputs:renderProductPath
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (-183.99448, 346.64987)
                }

                def OmniGraphNode "isaac_read_simulation_time" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom bool inputs:resetOnStop
                    custom int64 inputs:swhFrameNumber
                    token node:type = "omni.isaac.core_nodes.IsaacReadSimulationTime"
                    int node:typeVersion = 1
                    custom double outputs:simulationTime
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (-356.27673, 928.4023)
                }

                def OmniGraphNode "ros2_camera_helper" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom uint64 inputs:context
                    prepend uint64 inputs:context.connect = </World/default_environment/jetbot/Camera/ros2_context.outputs:context>
                    custom bool inputs:enabled
                    custom bool inputs:enableSemanticLabels
                    custom uint inputs:execIn (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    prepend uint inputs:execIn.connect = </World/default_environment/jetbot/Camera/isaac_create_render_product_01.outputs:execOut>
                    custom string inputs:frameId
                    prepend string inputs:frameId.connect = </World/default_environment/jetbot/Camera/constant_string.inputs:value>
                    custom uint inputs:frameSkipCount
                    custom string inputs:nodeNamespace
                    prepend string inputs:nodeNamespace.connect = </World/default_environment/jetbot/Camera/constant_string_01.inputs:value>
                    custom string inputs:qosProfile
                    custom uint64 inputs:queueSize
                    custom token inputs:renderProductPath
                    prepend token inputs:renderProductPath.connect = </World/default_environment/jetbot/Camera/isaac_create_render_product_01.outputs:renderProductPath>
                    custom bool inputs:resetSimulationTimeOnStop
                    custom string inputs:semanticLabelsTopicName
                    custom float2 inputs:stereoOffset
                    custom string inputs:topicName = "cameraInfo"
                    custom token inputs:type = "camera_info" (
                        allowedTokens = ["rgb", "depth", "depth_pcl", "instance_segmentation", "semantic_segmentation", "bbox_2d_tight", "bbox_2d_loose", "bbox_3d", "camera_info"]
                    )
                    custom bool inputs:useSystemTime
                    custom token inputs:viewport
                    token node:type = "omni.isaac.ros2_bridge.ROS2CameraHelper"
                    int node:typeVersion = 2
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (462.143, -358.39905)
                }

                def OmniGraphNode "ros2_camera_helper_01" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom uint64 inputs:context
                    prepend uint64 inputs:context.connect = </World/default_environment/jetbot/Camera/ros2_context.outputs:context>
                    custom bool inputs:enabled
                    custom bool inputs:enableSemanticLabels
                    custom uint inputs:execIn (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    prepend uint inputs:execIn.connect = </World/default_environment/jetbot/Camera/isaac_create_render_product_01.outputs:execOut>
                    custom string inputs:frameId
                    prepend string inputs:frameId.connect = </World/default_environment/jetbot/Camera/constant_string.inputs:value>
                    custom uint inputs:frameSkipCount
                    custom string inputs:nodeNamespace
                    prepend string inputs:nodeNamespace.connect = </World/default_environment/jetbot/Camera/constant_string_01.inputs:value>
                    custom string inputs:qosProfile
                    custom uint64 inputs:queueSize
                    custom token inputs:renderProductPath
                    prepend token inputs:renderProductPath.connect = </World/default_environment/jetbot/Camera/isaac_create_render_product_01.outputs:renderProductPath>
                    custom bool inputs:resetSimulationTimeOnStop
                    custom string inputs:semanticLabelsTopicName
                    custom float2 inputs:stereoOffset
                    custom string inputs:topicName = "rgb"
                    custom token inputs:type = "rgb" (
                        allowedTokens = ["rgb", "depth", "depth_pcl", "instance_segmentation", "semantic_segmentation", "bbox_2d_tight", "bbox_2d_loose", "bbox_3d", "camera_info"]
                    )
                    custom bool inputs:useSystemTime
                    custom token inputs:viewport
                    token node:type = "omni.isaac.ros2_bridge.ROS2CameraHelper"
                    int node:typeVersion = 2
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (484.41888, 107.66795)
                }

                def OmniGraphNode "constant_string" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom string inputs:value
                    token node:type = "omni.graph.nodes.ConstantString"
                    int node:typeVersion = 1
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (-47.59177, -327.80417)
                }

                def OmniGraphNode "constant_string_01" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom string inputs:value
                    token node:type = "omni.graph.nodes.ConstantString"
                    int node:typeVersion = 1
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (-50.40103, -227.25098)
                }

                def OmniGraphNode "ros2_publish_imu" (
                    prepend apiSchemas = ["NodeGraphNodeAPI"]
                )
                {
                    custom vector3d inputs:angularVelocity
                    prepend vector3d inputs:angularVelocity.connect = </World/default_environment/jetbot/Camera/isaac_read_imu_node.outputs:angVel>
                    custom uint64 inputs:context
                    custom uint inputs:execIn (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    prepend uint inputs:execIn.connect = </World/default_environment/jetbot/Camera/isaac_read_imu_node.outputs:execOut>
                    custom string inputs:frameId = "base_link"
                    custom vector3d inputs:linearAcceleration
                    prepend vector3d inputs:linearAcceleration.connect = </World/default_environment/jetbot/Camera/isaac_read_imu_node.outputs:linAcc>
                    custom string inputs:nodeNamespace
                    custom quatd inputs:orientation
                    prepend quatd inputs:orientation.connect = </World/default_environment/jetbot/Camera/isaac_read_imu_node.outputs:orientation>
                    custom bool inputs:publishAngularVelocity
                    custom bool inputs:publishLinearAcceleration
                    custom bool inputs:publishOrientation
                    custom string inputs:qosProfile
                    custom uint64 inputs:queueSize
                    custom double inputs:timeStamp
                    prepend double inputs:timeStamp.connect = </World/default_environment/jetbot/Camera/isaac_read_simulation_time.outputs:simulationTime>
                    custom string inputs:topicName
                    token node:type = "omni.isaac.ros2_bridge.ROS2PublishImu"
                    int node:typeVersion = 1
                    uniform token ui:nodegraph:node:expansionState = "open"
                    uniform float2 ui:nodegraph:node:pos = (134.72864, 604.26294)
                }
            }
        }
    }

    def OmniGraph "ROS2_Clock"
    {
        token evaluationMode = "Automatic"
        token evaluator:type = "execution"
        token fabricCacheBacking = "Shared"
        int2 fileFormatVersion = (1, 9)
        token pipelineStage = "pipelineStageSimulation"

        def OmniGraphNode "on_playback_tick" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 2
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (114.01487, 93.64118)
        }

        def OmniGraphNode "ros2_context" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uchar inputs:domain_id
            custom bool inputs:useDomainIDEnvVar
            token node:type = "omni.isaac.ros2_bridge.ROS2Context"
            int node:typeVersion = 2
            custom uint64 outputs:context
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-1.171129, 309.35773)
        }

        def OmniGraphNode "ros2_publish_clock" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </World/ROS2_Clock/ros2_context.outputs:context>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/ROS2_Clock/on_playback_tick.outputs:tick>
            custom string inputs:nodeNamespace
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </World/ROS2_Clock/isaac_read_simulation_time.outputs:simulationTime>
            custom string inputs:topicName
            token node:type = "omni.isaac.ros2_bridge.ROS2PublishClock"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (401.2965, 293.43192)
        }

        def OmniGraphNode "isaac_read_simulation_time" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom bool inputs:resetOnStop
            custom int64 inputs:swhFrameNumber
            token node:type = "omni.isaac.core_nodes.IsaacReadSimulationTime"
            int node:typeVersion = 1
            custom double outputs:simulationTime
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (16.465258, 483.1615)
        }
    }

    def "Black_Oak_Fall" (
        prepend payload = @omniverse://localhost/NVIDIA/Assets/Vegetation/Trees/Black_Oak_Fall.usd@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:scale:unitsResolve = (0.009999999776482582, 0.009999999776482582, 0.009999999776482582)
        double3 xformOp:translate = (2.3266263008117676, -1.3809826374053955, -2.907509895067051e-7)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale", "xformOp:scale:unitsResolve"]
    }

    def "Dogwood" (
        prepend payload = @omniverse://localhost/NVIDIA/Assets/Vegetation/Trees/Dogwood.usd@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:scale:unitsResolve = (0.009999999776482582, 0.009999999776482582, 0.009999999776482582)
        double3 xformOp:translate = (-43.48402786254883, -2.495945453643799, 4.392966559407796e-7)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale", "xformOp:scale:unitsResolve"]
    }
}

def Xform "Environment"
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float inputs:angle = 1
        float inputs:intensity = 3000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        quatd xformOp:orient = (0.6532814824381883, 0.27059805007309856, 0.27059805007309856, 0.6532814824381883)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

